import React, { useState } from 'react';
import { Send } from 'lucide-react';

export const PromoSubmissionForm: React.FC = () => {
  const [formData, setFormData] = useState({
    serviceName: '',
    promoCode: '',
    discount: '',
    validUntil: '',
    terms: ''
  });

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage(null);

    try {
      const response = await fetch('/telegram', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json', // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
        },
        body: JSON.stringify(formData), // üî• JSON.stringify –≤–º–µ—Å—Ç–æ URLSearchParams
      });

      const result = await response.json();

      if (response.ok && result.status === 'ok') {
        setMessage('‚úÖ –°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
        setFormData({
          serviceName: '',
          promoCode: '',
          discount: '',
          validUntil: '',
          terms: ''
        });
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.'}`);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
    }

    setLoading(false);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="serviceName" className="block text-sm font-medium text-gray-300 mb-1">
          –°–µ—Ä–≤–∏—Å
        </label>
        <input
          type="text"
          id="serviceName"
          value={formData.serviceName}
          onChange={(e) => setFormData({ ...formData, serviceName: e.target.value })}
          className="w-full bg-[#2a2a2a] text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
        />
      </div>
      <div>
        <label htmlFor="promoCode" className="block text-sm font-medium text-gray-300 mb-1">
          –ü—Ä–æ–º–æ–∫–æ–¥
        </label>
        <input
          type="text"
          id="promoCode"
          value={formData.promoCode}
          onChange={(e) => setFormData({ ...formData, promoCode: e.target.value })}
          className="w-full bg-[#2a2a2a] text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
          placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥"
        />
      </div>
      <div>
        <label htmlFor="discount" className="block text-sm font-medium text-gray-300 mb-1">
          –û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏
        </label>
        <input
          type="text"
          id="discount"
          value={formData.discount}
          onChange={(e) => setFormData({ ...formData, discount: e.target.value })}
          className="w-full bg-[#2a2a2a] text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 30% –Ω–∞ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—è—Ü–∞"
        />
      </div>
      <div>
        <label htmlFor="validUntil" className="block text-sm font-medium text-gray-300 mb-1">
          –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ
        </label>
        <input
          type="date"
          id="validUntil"
          value={formData.validUntil}
          onChange={(e) => setFormData({ ...formData, validUntil: e.target.value })}
          className="w-full bg-[#2a2a2a] text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>
      <div>
        <label htmlFor="terms" className="block text-sm font-medium text-gray-300 mb-1">
          –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </label>
        <input
          type="text"
          id="terms"
          value={formData.terms}
          onChange={(e) => setFormData({ ...formData, terms: e.target.value })}
          className="w-full bg-[#2a2a2a] text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        />
      </div>
      <button
        type="submit"
        className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled={loading}
      >
        {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : <>
          <Send className="w-4 h-4" />
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        </>}
      </button>

      {message && (
        <p className={`text-sm mt-2 ${message.startsWith('‚úÖ') ? 'text-green-400' : 'text-red-400'}`}>
          {message}
        </p>
      )}
    </form>
  );
};
